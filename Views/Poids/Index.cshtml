@model BodybuildingManager.Lib.ObjetVue.ObjetPoids
@{
    ViewData["Title"] = "Suivis du poids";
}
<center>
<h1>@ViewData["Title"]</h1>

@if (string.IsNullOrEmpty(ViewBag.Message) == false)
{
    <div style="background-color: #b94a48;width: auto;border: #da4f49;border-style: solid;color: #fff;">
        @ViewBag.Message
    </div>
}

<p>Veuillez indiquer votre poids et la date si le poids correspond à une autre date que maintenant :</p>
@using (Html.BeginForm("PeseePoids", "Poids", FormMethod.Post))
{

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <div>
    <div class="poidstb">
        @Html.LabelFor(m => m.PoidsMaintenant.Kilogramme,"Poids (en Kg) :")
    </div>
    <div class="poidstb">
        @Html.TextBox("poidsKilo",Model.PoidsMaintenant.Kilogramme, new { id="poidsKilo",@type = "number",style = "width:100px", step="0.01" }) Kg
        @Html.ValidationMessageFor(m => m.PoidsMaintenant.Kilogramme)
    </div>
</div>
    <br>
    <div class="clear"></div>
    <div>
    <div class="datetb">
        @Html.LabelFor(m => m.PoidsMaintenant.DatePoids,"Date de la pesée :")
    </div>
    <div class="datetb">
        @Html.TextBox("datePesee",Model.DateMaintenant, "{0:yyyy-MM-ddTHH:mm:ss}", new{id="datePesee",@type="datetime-local"})
        @Html.ValidationMessageFor(m => m.PoidsMaintenant.DatePoids)
    </div>
</div>
    <div class="clear"></div>
    <br>
    <div><input class="postbutton btn btn-primary" type="submit" value="Ajouter" /></div>
}

<br>
<br>
<div>
    @{
        List<BodybuildingManager.Models.Database.Poids> derniereAnnee = Model.ListePoids.Where(x=>x.DatePoids > DateTime.Now.AddYears(-1)).ToList();
        List<BodybuildingManager.Models.Database.Poids> dernierMois = Model.ListePoids.Where(x=>x.DatePoids > DateTime.Now.AddMonths(-1)).ToList();
        List<BodybuildingManager.Models.Database.Poids> derniereSemaine = Model.ListePoids.Where(x=>x.DatePoids > DateTime.Now.AddDays(-7)).ToList();
        List<BodybuildingManager.Models.Database.Poids> dernierJour = Model.ListePoids.Where(x=>x.DatePoids > DateTime.Now.AddDays(-1)).ToList();

        List<BodybuildingManager.Models.Database.Poids> avantDerniereAnnee = Model.ListePoids.Where(x=>x.DatePoids > DateTime.Now.AddYears(-2) && x.DatePoids < DateTime.Now.AddYears(-1)).ToList();
        List<BodybuildingManager.Models.Database.Poids> avantDernierMois = Model.ListePoids.Where(x=>x.DatePoids > DateTime.Now.AddMonths(-2) && x.DatePoids < DateTime.Now.AddMonths(-1)).ToList();
        List<BodybuildingManager.Models.Database.Poids> avantDerniereSemaine = Model.ListePoids.Where(x=>x.DatePoids > DateTime.Now.AddDays(-14) && x.DatePoids < DateTime.Now.AddDays(-7)).ToList();
        List<BodybuildingManager.Models.Database.Poids> avantDernierJour = Model.ListePoids.Where(x=>x.DatePoids > DateTime.Now.AddDays(-2) && x.DatePoids < DateTime.Now.AddDays(-1)).ToList();

        if(derniereAnnee.Count != 0)
        {
            string avantDernierAnneePourcent = "";
            if(avantDerniereAnnee.Count != 0)
            {
                var pourcent = (derniereAnnee.Average(x=>x.Kilogramme)*100/avantDerniereAnnee.Average(x=>x.Kilogramme))-100;
                avantDernierAnneePourcent = (pourcent >= 0 ? "+" : "") + Math.Round(pourcent,1) +"%";
            }
             <p>Dernière année : @derniereAnnee.Average(x=>x.Kilogramme) Kg @avantDernierAnneePourcent</p>
        }
        if(dernierMois.Count != 0)
        {
            string avantDernierMoisPourcent = "";
            if(avantDernierMois.Count != 0){
                var pourcent = (dernierMois.Average(x=>x.Kilogramme)*100/avantDernierMois.Average(x=>x.Kilogramme))-100;
                avantDernierMoisPourcent = (pourcent >= 0 ? "+" : "") + Math.Round(pourcent,1) +"%";
            }
             <p>Dernier mois : @dernierMois.Average(x=>x.Kilogramme) Kg @avantDernierMoisPourcent</p>
        }
        if(derniereSemaine.Count != 0)
        {
            string avantDerniereSemainePourcent = "";
            if(avantDerniereSemaine.Count != 0){
                var pourcent = (derniereSemaine.Average(x=>x.Kilogramme)*100/avantDerniereSemaine.Average(x=>x.Kilogramme))-100;
                avantDerniereSemainePourcent = (pourcent >= 0 ? "+" : "") + Math.Round(pourcent,1) +"%";
            }
             <p>Dernière semaine : @derniereSemaine.Average(x=>x.Kilogramme) Kg @avantDerniereSemainePourcent</p>
        }
        if(dernierJour.Count != 0)
        {
            string avantDernierJourPourcent = "";
            if(avantDernierJour.Count != 0){
                var pourcent = (dernierJour.Average(x=>x.Kilogramme)*100/avantDernierJour.Average(x=>x.Kilogramme))-100;
                avantDernierJourPourcent = (pourcent >= 0 ? "+" : "") + Math.Round(pourcent,1) +"%";
            }
             <p>Dernier jour : @dernierJour.Average(x=>x.Kilogramme) Kg @avantDernierJourPourcent</p>
        }
    }
</div>
<table class="table table-striped table-bordered">
    <tr>
        <th>Poids</th>
        <th>Date</th>
        <th>Action</th>
    </tr>

@foreach (BodybuildingManager.Models.Database.Poids poids in Model.ListePoids.OrderByDescending(p => p.DatePoids)) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => poids.Kilogramme)Kg
        </td>
        <td>
            @poids.DatePoids.ToString("dd/MM/yyyy HH:mm")
        </td>
        <td>
            @Html.ActionLink("Supprimer", "SupprimerPoids", new { idPoids=poids.Id }, htmlAttributes: new { onclick = "return confirm ('Êtes-vous sûr de vouloir supprimer cette pesée ?');" })
        </td>
    </tr>
}
</table>
</center>